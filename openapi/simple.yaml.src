#
# Questo e' un progetto d'esempio in formato OpenAPI 3.0 API Starter Kit.
#
# Stai per sviluppare un API? Segui attentamente questo template e
#   potrai integrarla facilmente in Developers Italia.
#
# Se usi componenti in modo ricorrente, yaml
#   permette di definirle e riusarle.
#   Puoi metterle nell'oggetto x-commons e rimuoverlo
#   prima di pubblicarle.
x-commons:
  ratelimit-headers: &ratelimit-headers
    X-RateLimit-Limit:
      $ref: '#/components/headers/X-RateLimit-Limit'
    X-RateLimit-Remaining:
      $ref: '#/components/headers/X-RateLimit-Remaining'
    X-RateLimit-Reset:
      $ref: '#/components/headers/X-RateLimit-Reset'
  common-responses: &common-responses
    '400':
      $ref: '#/components/responses/400BadRequest'
    '429':
      $ref: '#/components/responses/429TooManyRequests'
    '503':
      $ref: '#/components/responses/503ServiceUnavailable'
    default:
      $ref: '#/components/responses/default'

openapi: 3.0.0
info:
  version: "1.0.0"
  # Il `title` e' il nome del tuo prodotto/servizio!
  # E' la prima cosa ad apparire in pagine web e cataloghi.
  # Dev'essere chiaro e conciso.
  title: |-
    Ora esatta.
  x-summary: >-
    Questo servizio ritorna la data e l'ora attuali in UTC.
  description: |
    #### Documentazione
    Il servizio Ora esatta ritorna l'ora del server in formato RFC5424 (syslog).

    `2018-12-30T12:23:32Z`

    Qui va' inserita la documentazione principale del servizio.
    Il testo dev'essere diviso in piu' parti, tutte scritte in Markdown.

    Questa sezione e' informativa. Ricordati di inserire:

      * cosa fanno queste API?
      * chi puo' beneficiarne?
      * perche' sono utili?

    ##### Sottosezioni
    E' possibile utilizzare - con criterio - delle sottosezioni.

    #### Note

    Il servizio non richiede autenticazione, ma va' usato rispettando gli
    header di throttling esposti in conformita' alle Linee Guida del Modello di interoperabilita'.

    Usa questa sezione per annotazioni specifiche, riferimenti normativi e/o
    per manleve ed esclusioni di responsabilita' eventualmente non incluse in `termsOfService`.

    #### Informazioni tecniche ed esempi

    Esempio:

    ```
    http http://localhost:8443/datetime/v1/echo
    {
      'datetime': '2018-12-30T12:23:32Z'
    }
    ```

    Qui e' possibile introdurre brevi informazioni tecniche ed esempi.
    Attenzione: la `description` non sostituisce la documentazione di progetto,
    deve pero' facilitare l'esecuzione delle prime richieste.


  # I termini del servizio contengono un riferimento
  #   a tutte le indicazioni e le note legali per l'utilizzo
  #   del servizio, inclusi gli eventuali riferimenti utili al GDPR.
  termsOfService: 'http://swagger.io/terms/'
  # Chi posso contattare per informazioni sul servizio e sul suo stato?
  contact:
    email: robipolli@gmail.com
    name: Roberto Polli
    url: https://twitter.com/ioggstream
  # L'audience delle API. Attualmente e' definito solamente
  #   la tipologia `public`.
  x-audience:
    - public
  # Ogni API deve avere un UUID, invariante nel tempo e
  #   rispetto al `title`.
  x-api-id: 00000000-0000-0000-0000-000000000000
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

  # Per dare indicazioni sul ciclo di vita dell'API
  # si puo' usare un parametro come:
  x-lifecycle:
    published: 1970-01-01
    deprecated: 2050-01-01
    retired: 2050-06-01
    maturity: published

# Una lista di `tag` utili a raggruppare le varie operazioni
#   eseguite dalle API. Ogni `tag` puo' referenziare un link
#   alla sua descrizione.
tags:
  - name: public
    description: Retrieve informations
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
# Uno o piu' server di erogazione.
#   Puo' essere utile indicare gli indirizzi di collaudo,
#   sviluppo e test.
#   Di seguito mostriamo come indicare se il server
#   e' una sandbox o meno con dei tag custom.
servers:
  - description: Development server
    url: https://localhost:8443/datetime/v1
  - description: Test server
    url: https://api.example.com/datetime/v1
    x-sandbox: true
    # Questo parametro indica come testare il servizio.
    x-healthCheck:
      url: https://api.example.com/datetime/v1/status
      interval: 300
      timeout: 15

#
# Qui vanno tutti i path.
#
paths:
  /echo:
    get:
      summary: Ritorna un timestamp in formato RFC5424.
      description: |
        Ritorna un timestamp in formato RFC5424
        prendendola dal server attuale.
      operationId: get_echo
      tags:
        - public
      responses:
        <<: *common-responses
        '200':
          description: |
            Il server ha ritornato il timestamp.
          # Questi header di throttling sono obbligatori e definiti
          #   nel Nuovo modello di interoperabilità.
          headers:
            <<: *ratelimit-headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamps'
  /status:
    get:
      summary: Ritorna lo stato dell'applicazione.
      description: |
        Ritorna lo stato dell'applicazione. A scopo
        di test, su base randomica puo' ritornare
        un errore.
      operationId: get_status
      tags:
        - public
      responses:
        <<: *common-responses
        '200':
          description: |
            Il server ha ritornato lo status. In caso di problemi
            ritorna sempre un problem+json.
          # Questi header di throttling sono obbligatori e definiti
          #   nel Nuovo modello di interoperabilità.
          headers:
            <<: *ratelimit-headers
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

components:

  headers:
    X-RateLimit-Limit:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Limit'
    X-RateLimit-Remaining:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Remaining'
    X-RateLimit-Reset:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Reset'
    Retry-After:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/Retry-After'

  responses:
    # Predefined error codes for this API
    400BadRequest:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/400BadRequest'
    404NotFound:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/404NotFound'
    429TooManyRequests:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/429TooManyRequests'
    503ServiceUnavailable:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/503ServiceUnavailable'
    default:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/default'

  schemas:
    Problem:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/schemas/Problem'
    Timestamps:
      type: object
      description: Un Timestamp in RFC5424
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2018-12-30T12:23:32Z'
